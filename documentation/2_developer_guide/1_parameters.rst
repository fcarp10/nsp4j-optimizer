**********
Parameters
**********

This chapter shows all the parameters and variables used for the model. The next tables show how to get the parameters defined in the input files, once the model is loaded. For loading parameters, the next function is used:

.. code-block:: java

    Parameters pm = ConfigFiles.readParameters(pathFile, fileName + ".yml");

Where *pathFile* is the location of the file, and *fileName* the name of the .yml input file. The *pm* object allows to access to all parameters specified in the next tables.

**VNF parameters**

+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| Name	       |   Type	      |  Symbol	                 | Code access                                                                                             |
+==============+==============+==========================+=========================================================================================================+
| Parameters of the Service Function Chains (SFC)                                                                                                                  |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| service chain| Array	      | :math:`\mathbb{V}_s`     | ``(List<Service>) pm.getServices()``                                                                    |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| sharedNF     | binary Array |	:math:`F_{M}^{v,s}`      | ``(List<Integer>) pm.getServices().get(s).getAttribute("sharedNF");``                                   |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| minPaths     | Integer      | :math:`R^s_{MIN}`        | ``(int) pm.getServices().get(s).getAttribute("minPaths");``                                             |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxPaths     | Integer      | :math:`R^s_{MAX}`        | ``(int) pm.getServices().get(s).getAttribute("maxPaths");``                                             |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| minReplica   | Integer      | :math:`F^s_{Rmin}`       | ``(int) pm.getServices().get(s).getAttribute("minReplica");``                                           |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxReplica   | Integer      | :math:`F^s_{Rmax}`       | ``(int) pm.getServices().get(s).getAttribute("maxReplica");``                                           |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxVNFserver | Integer      | :math:`\hat{V}^s`        | ``(int) pm.getServices().get(s).getAttribute("maxVNFserver");``                                         |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| serviceDelay | Integer      | :math:`D_s`              | ``(int) pm.getServices().get(s).getAttribute("serviceDelay");``                                         |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
|   Parameters of the Network Functions (NF)                                                                                                                       |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| replicable   | Boolean      | :math:`F_{R}^{f}`        | ``(boolean) pm.getServices().get(s).getFunctions().get(v).getAttribute("replicable");``                 |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| load	       | Double       | :math:`L_T^f`	         | ``(double) pm.getServices().get(s).getFunctions().get(v).getAttribute("load");``                        |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| overhead     | Double       | :math:`L_O^f`            | ``(int) pm.getServices().get(s).getFunctions().get(v).getAttribute("overhead");``                       |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxLoad      | Integer      | :math:`C_P^f`	         | ``(int) pm.getServices().get(s).getFunctions().get(v).getAttribute("maxLoad");``                        |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxsubflows  | Integer      | :math:`\tilde{\Lambda}^f`| ``(int) pm.getServices().get(s).getFunctions().get(v).getAttribute("maxsubflows");``                    |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxSharedSFC | Integer      | :math:`\tilde{S}^f`      | ``(int) pm.getServices().get(s).getFunctions().get(v).getAttribute("maxSharedSFC");``                   |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxSharedVNF | Integer      | :math:`\tilde{V}^f`      | ``(int) pm.getServices().get(s).getFunctions().get(v).getAttribute("maxSharedVNF");``                   |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxInstance  | Integer      | :math:`\hat{\Theta}^f`   | ``(int) pm.getServices().get(s).getFunctions().get(v).getAttribute("maxInstances");``                   |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| delay        | Integer      | :math:`D^t`              | ``(int) pm.getServices().get(s).getFunctions().get(v).getAttribute("delay");``                          |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| Parameters of traffic flows for SFC *s*                                                                                                                          |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| demands      | Array        | :math:`\Lambda_s`        | ``(List<Integer>) pm.getServices().get(s).getTrafficFlow().getDemands()``                               |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| src          | String       | :math:`n_o`              | ``(string) pm.getServices().get(s).getTrafficFlow().getSrc();``                                         |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| dst          | Integer      | :math:`n_d`              | ``(string) pm.getServices().get(s).getTrafficFlow().getDst();``                                         |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| minDem       | Integer      | :math:`|\Lambda|_{min}`  | ``(int) pm.getServices().get(s).getTrafficFlow().getMinDem();``                                         |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxDem       | Integer      | :math:`|\Lambda|_{max}`  | ``(int) pm.getServices().get(s).getTrafficFlow().getMaxDem();``                                         |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| minBw        | Integer      | :math:`\lambda_{min}`    | ``(int) pm.getServices().get(s).getTrafficFlow().getMinBw();``                                          |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxBw        | Integer      | :math:`\lambda_{max}`    | ``(int) pm.getServices().get(s).getTrafficFlow().getMaxBw();``                                          |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+


The next table shows how to access to the network and server parameters specified in the topology input file .dgs.

**Network and Server parameters**

+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
| Name	           |   Type  |  Symbol            | Code access                                                                             |
+==================+=========+====================+=========================================================================================+
| Server based Service Chain parameters                                                                                                     |
+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
| servers          | Array   | :math:`X`          | ``(List<Server>) pm.getServers()``                                                      |
+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
| serverCapacity   | Integer | :math:`C_x`        | ``pm.getServers().get(x).getCapacity();``                                               |
+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
| processingDelay  | Integer | :math:`T_{P_x}`    | ``pm.getServers().get(x).getAttribute("process_delay");``                               |
+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
| type             | Integer | :math:`T_{X_n}`    | ``pm.getServers().get(x).getAttribute("type")``                                         |
+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
| MaxSFC           | Integer | :math:`\hat{S}_x`  | ``(int) pm.getServers().get(x).getParent().getAttribute("MaxSFC")``                     |
+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
| VMmax            | Integer | :math:`\hat{VM}_x` | ``(int) pm.getServers().get(x).getParent().getAttribute("VMmax")``                      |
+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
| Link based parameters                                                                                                                     |
+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
| link_capacity    | Integer | :math:`C_e`        |  ``(int) pm.getLinks().get(l).getAttribute("capacity")``                                |
+------------------+---------+--------------------+-----------------------------------------------------------------------------------------+
