******************
Optimization Model
******************




Parameters and Variables
========================

The parameters and variables used on the following formulas are shown on the following tables.

**VNF parameters from input file** *example.yml*

+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| Name	       |   Type	      |  Symbol	                 | Code access for Service Chain parameters                                                                |
+==============+==============+==========================+=========================================================================================================+
| chain	       | Array	      | :math:`\mathbb{V}_s`     |                                                                                                         |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| sharedNF     | binary Array |	:math:`F_{M}^{v,s}`      | List<Integer> sharedNF = (List<Integer>) pm.getServices().get(s). getAttribute("sharedNF")              |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| minPaths     | Integer      | :math:`R^s_{MIN}`        | int minPaths = (int) pm.getServices().get(s).getAttribute("minPaths")                                   |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxPaths     | Integer      | :math:`R^s_{MAX}`        | int maxPaths = (int) pm.getServices().get(s).getAttribute("maxPaths")                                   |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| minReplica   | Integer      | :math:`F^s_{Rmin}`       | int minReplica = (int) pm.getServices().get(s).getAttribute("minReplica")                               |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxReplica   | Integer      | :math:`F^s_{Rmax}`       | int maxReplica = (int) pm.getServices().get(s).getAttribute("maxReplica")                               |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxVNFserver | Integer      | :math:`\hat{V}^s`        | int maxVNFserver = (int) pm.getServices().get(s).getAttribute ("maxVNFserver")                          |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
|    	       |              |                          | Code access for Network Function parameters                                                             |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| replicable   | Boolean      | :math:`F_{R}^{f}`        | boolean replicable = (boolean) pm.getServices().get(s).getFunctions().get(v). getAttribute("replicable")|
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| load	       | Double       | :math:`L_T^f`	         | double load = (double) pm.getServices().get(s).getFunctions().get(v) .getAttribute("load")              |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| overhead     | Integer      | :math:`L_O^f`            | int overhead = (int) pm.getServices().get(s).getFunctions().get(v). getAttribute("overhead")            |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxLoad      | Integer      | :math:`C_P^f`	         | int maxLoad = (int) pm.getServices().get(s).getFunctions().get(v). getAttribute("maxLoad")              |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxsubflows  | Integer      | :math:`\tilde{\Lambda}^f`| int maxsubflows = (int) pm.getServices().get(s).getFunctions().get(v). getAttribute("maxsubflows")      |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxSharedSFC | Integer      | :math:`\tilde{S}^f`      | int maxSharedSFC = (int) pm.getServices().get(s).getFunctions().get(v). getAttribute("maxSharedSFC")    |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxSharedVNF | Integer      | :math:`\tilde{V}^f`      | int maxSharedVNF = (int) pm.getServices().get(s).getFunctions().get(v). getAttribute("maxSharedVNF")    |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+
| maxInstance  | Integer      | :math:`\hat{\theta}^f`   | int maxInstances = (int) pm.getServices().get(s).getFunctions().get(v). getAttribute("maxInstances")    |
+--------------+--------------+--------------------------+---------------------------------------------------------------------------------------------------------+




**Network topology and traffic parameters**

+-----------------------------+------------+----------------------------------------------------------------------------------------------------+
| Parameters                  |Short code  | Meaning or long code                                                                               |
+=============================+============+====================================================================================================+
| :math:`\mathbb{N}`          |            | set of nodes, servers, links, services and linear cost functions, respectively                     |
+-----------------------------+------------+----------------------------------------------------------------------------------------------------+
| :math:`\mathbb{E}`          |            | set of nodes, servers, links, services and linear cost functions, respectively                     |
+-----------------------------+------------+----------------------------------------------------------------------------------------------------+
| :math:`\mathbb{X}`          |            | set of nodes, servers, links, services and linear cost functions, respectively                     |
+-----------------------------+------------+----------------------------------------------------------------------------------------------------+
| :math:`\mathbb{X}_n`        |            |  set of servers connexted to node *n*                                                              |
+-----------------------------+------------+----------------------------------------------------------------------------------------------------+
| :math:`C_e`                 |            |  capacity of link *e*                                                                              |
+-----------------------------+------------+----------------------------------------------------------------------------------------------------+
| :math:`C_x`                 |            |  capacity of server *x*                                                                            |
+-----------------------------+------------+----------------------------------------------------------------------------------------------------+
| :math:`\Lambda_s`           |            |  set of traffic demands                                                                            |
+-----------------------------+------------+----------------------------------------------------------------------------------------------------+
| :math:`\Pi^s_p`             |            |  set of ordered nodes traversed by path *p* of SFC s                                               |
+-----------------------------+------------+----------------------------------------------------------------------------------------------------+
| :math:`\delta_{e}(p)`       |            |  true if path *p* traverses link *e*                                                               |
+-----------------------------+------------+----------------------------------------------------------------------------------------------------+


**Binary decision variables**

+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+
|Symbol                       | Short code  | Meaning or long code                                                                               |
+=============================+=============+====================================================================================================+
| :math:`z_{p}^s`             | rSP         | true if service *s* is using path *p*                                                              |
+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+
| :math:`z_{p}^{k,s}`         | rSPD        | true if traffic demand :math:`\lambda_k` of service *s* is using the path *p*                      |
+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+
| :math:`f_x^{v,s}`           | pXSV        | true if function *v* of service *s* is allocated in server *x*                                     |
+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+
| :math:`f_{x,k}^{v,s}`       | pXSVD       | true if function *v* from service *s* is being used in server *x* by traff demand :math:`\lambda_k`|
+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+
| :math:`f_x`                 | pX          | true if server *x* is used                                                                         |
+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+

**Optimization model variables and functions**

+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+
|Symbol                       | Short code  | Meaning or long code                                                                               |
+=============================+=============+====================================================================================================+
|:math:`k_e`                  | kL          | utilization cost of link *e*                                                                       |
+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+
|:math:`u_e`                  | uL          | Constraint integer 0 <= uL <= 1 ; utilization of link *e*                                          |
+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+
|:math:`k_x`                  | kX          | utilization cost of server *x*                                                                     |
+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+
|:math:`u_x`                  | uX          | Constraint integer 0 <= uL <= 1 ;utilization of server *x*                                         |
+-----------------------------+-------------+----------------------------------------------------------------------------------------------------+

